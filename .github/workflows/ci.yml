name: Versionamento

on:
  push:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: Checar repositório
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Instalar dependências
        run: npm install

      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag caso não exista
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          fi

      - name: Calcular nova versão
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "Versão Atual: $LAST_TAG"
          
          # Obter commits desde a última tag
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMIT_MESSAGES=$(git log --pretty=format:"%s" | tr '\n' '|')
          else
            COMMIT_MESSAGES=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" | tr '\n' '|')
          fi
          
          echo "Commits desde a última tag: $COMMIT_MESSAGES"
          
          # Verificar se há commits para processar
          if [ -z "$COMMIT_MESSAGES" ]; then
            echo "Nenhum commit encontrado desde a última tag"
            echo "should_version=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Inicializando variáveis
          MAJOR=0
          MINOR=0
          PATCH=0
          
          # Analisando mensagens de commit
          IFS='|' read -ra COMMITS <<< "$COMMIT_MESSAGES"
          for COMMIT in "${COMMITS[@]}"; do
            echo "Analisando commit: $COMMIT"
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
              echo "Encontrado BREAKING CHANGE"
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
              echo "Encontrado feat"
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
              echo "Encontrado fix"
            fi
          done
          
          # Verificar se alguma mudança foi detectada
          if [[ $MAJOR -eq 0 && $MINOR -eq 0 && $PATCH -eq 0 ]]; then
            echo "Nenhuma mudança versionável detectada"
            echo "should_version=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Calculando a nova versão usando semver
          CURRENT_VERSION=${LAST_TAG#v}
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
            echo "Incrementando versão MAJOR"
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
            echo "Incrementando versão MINOR"
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
            echo "Incrementando versão PATCH"
          fi
          
          echo "Nova versão: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "should_version=true" >> $GITHUB_ENV

      - name: Verificar se deve atualizar versão
        run: |
          if [ "${{ env.should_version }}" = "false" ]; then
            echo "Pulando atualização de versão - nenhuma mudança detectada"
            exit 0
          fi

      - name: Atualizar versão no package.json
        if: env.should_version == 'true'
        run: |
          echo "Atualizando versão para ${{ env.new_version }}"
          npm version ${{ env.new_version }} --no-git-tag-version --allow-same-version
          
      - name: Commit e push
        if: env.should_version == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add package.json
          git commit -m "chore(release): version ${{ env.new_version }}"
          git tag v${{ env.new_version }}
          git push origin main --tags
